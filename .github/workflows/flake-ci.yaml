name: Build and Release Sursface

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  initialize_release:
    name: Initialize GitHub Release
    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      tag_name: ${{ steps.generate_tag.outputs.version }}

    steps:
      - name: Generate Tag Name
        id: generate_tag
        run: |
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create Empty Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.generate_tag.outputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: initialize_release

    strategy:
      matrix:
        target: [
          "x86_64-linux",
          "x86_64-windows",
          "wasm32-unknown"
        ]

    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v29
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size: 1073741824
          purge: true
          purge-prefixes: cache-${{ runner.os }}-
          purge-created: 0
          purge-primary-key: never

      - name: Build Package
        run: |
          nix build .#${{ matrix.target }}
          mkdir -p output
          zip -r output/sursface-${{ matrix.target }}.zip result/*

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.initialize_release.outputs.tag_name }}
          files: output/sursface-${{ matrix.target }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}